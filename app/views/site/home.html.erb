<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/nvd3/1.1.15-beta/nv.d3.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/nvd3/1.1.15-beta/nv.d3.min.css"/>
<style>
.chart svg {
  height: auto;
}
.chart rect {
  fill: steelblue;
}
.chart text {
  fill: white;
  font: 10px sans-serif;
  text-anchor: end;
}
#graph1-2 {
  height: 400px;
}
#graph2-2 {
  height: 210px;
  width: 500px;
}
#graph2-1 {
  height: 310px;
  width: 700px;
}
</style>
<h1>D3 Examples</h1>
<p>Find me in <a href="https://github.com/hackershipco/rails-d3examples">
    app/views/site/home.html.erb</a></p>
<p>The following are two examples of using d3 and <a href="http://nvd3.org/index.html">nv</a>
  in a Rails project, it will get data
  asynchronously from the back end using jQuery and then create a graph with d3.</p>
<p>I recommend using something like nv also to save time and build cooler graphs than by using d3
  alone, which can be a little hard, do go and learn d3 tho, is important knowing what's up.</p>
<p>Nothing fancy here, the server has two actions that return data, one site/array and
  site/json, as you might guess, they return an array and json respectively.</p>


<h2>Data from /array</h2>
<button class='btn btn-primary getarray'>refresh Array</button>
<div id="graph1-1" class='chart' ><svg></svg></div>
<div id="graph1-2" class='' ><svg></svg></div>
<h2>Data from /json</h2>
<button class='btn btn-primary getjson'>refresh Json</button>
<div id="graph2-1" class='' ><svg></svg></div>
<div id="graph2-2" class='' ><svg></svg></div>

<script>
  var getArray, getJson, array1, array2, array3, json1;


  // First graph, with array result and bars
  array1 = function array1 (data) {
    var width = 420,
        barHeight = 20;
    var x = d3.scale.linear()
      .domain([0, d3.max(data)])
      .range([0, width]);
    var chart = d3.select("#graph1-1 svg")
      .attr("width", width)
      .attr("height", barHeight * data.length);
    var bar = chart.selectAll("g")
      .data(data)
      .enter().append("g")
      .attr("transform", function(d, i) { return "translate(0," + i * barHeight + ")"; });
    bar.append("rect")
      .attr("width", x)
      .attr("height", barHeight - 1);
    bar.append("text")
      .attr("x", function(d) { return x(d) - 3; })
      .attr("y", barHeight / 2)
      .attr("dy", ".35em")
      .text(function(d) { return d; });
  };

// Second graph for array data, using nv to create a donut
array2 = function array2 (data) {
  nv.addGraph(function() {
      var chart = nv.models.pieChart()
      .x(function(d) { return d})
      .y(function(d) { return d})
      .showLabels(false)     //Display pie labels
      .labelThreshold(.05)  //Configure the minimum slice size for labels to show up
      .labelType("percent") //Configure what type of data to show in the label. Can be "key", "value" or "percent"
      .donut(true)          //Turn on Donut mode. Makes pie chart look tasty!
      .donutRatio(0.35)     //Configure how big you want the donut hole size to be.
      ;

      d3.select("#graph1-2 svg")
      .datum(data)
      .transition().duration(350)
      .call(chart);

      return chart;
      });
};


// Grah of stacked areas http://nvd3.org/examples/stackedArea.html
json1 = function json1 (data) {
  nv.addGraph(function() {
      var chart = nv.models.stackedAreaChart()
      .margin({right: 100})
      .x(function(d) { return d[0] })   //We can modify the data accessor functions...
      .y(function(d) { return d[1] })   //...in case your data is formatted differently.
      .useInteractiveGuideline(true)    //Tooltips which show all data points. Very nice!
      .rightAlignYAxis(true)      //Let's move the y-axis to the right side.
      .transitionDuration(500)
      .showControls(true)       //Allow user to choose 'Stacked', 'Stream', 'Expanded' mode.
      .clipEdge(true);

      //Format x-axis labels with custom function.
      chart.xAxis
      .tickFormat(function(d) { 
        return d3.time.format('%x')(new Date(d)) 
        });

      chart.yAxis
      .tickFormat(d3.format(',.2f'));

      d3.select('#graph2-1 svg')
        .datum(data)
        .call(chart);

      nv.utils.windowResize(chart.update);

      return chart;
  });
};

// graphs of lines http://nvd3.org/examples/line.html
// data should be like: [{ values: [0..10],key: 'label',color: '#2ca02c'}]
json2 = function json2 (data) {
  //data = [{ values: data, key: 'Important Data', color: '#2ca02c'}];
  nv.addGraph(function() {
      var chart = nv.models.lineChart()
      .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.
      .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
      .transitionDuration(350)  //how fast do you want the lines to transition?
      .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
      .showYAxis(true)        //Show the y-axis
      .showXAxis(true)        //Show the x-axis
      ;

      chart.xAxis     //Chart x-axis settings
      .axisLabel('Time (ms)')
      .tickFormat(d3.format(',r'));

      chart.yAxis     //Chart y-axis settings
      .axisLabel('Voltage (v)')
      .tickFormat(d3.format('.02f'));

      /* Done setting the chart up? Time to render it!*/
      d3.select('#graph2-2 svg')    //Select the <svg> element you want to render the chart in.   
        .datum(data)         //Populate the <svg> element with chart data...
        .call(chart);          //Finally, render the chart!
      return chart;
  });

};


  // Using jquery's get https://api.jquery.com/jquery.get/ to
  // make a web request and get the data, with the data for
  // array we'll draw three graphs,
  // getArray is a function that holds the ajax call.
  getArray = function getArray () {
    $.get('/site/array').then(function (data) {
      // before redrawing we have to empty out or remove the old lines
      $('[id*="graph1"] svg').empty();
      array1(data);
      array2(data);
    });
    return arguments.callee;
  }();

  getJson = function getArray () {
    // before redrawing we have to empty out or remove the old lines
    $('[id*="graph2"] svg').empty();
    $.get('/site/json').then(function (data) {
      json2(data);
    });
    $.get('/site/json2').then(function (data) {
      json1(data);
    });
    return arguments.callee;
  }();


// Event listeners
$('.getarray').click(getArray);
$('.getjson').click(getJson);

</script>
